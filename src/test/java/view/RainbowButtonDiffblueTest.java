package view;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertFalse;
import static org.junit.jupiter.api.Assertions.assertNull;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.event.FocusListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.beans.PropertyChangeListener;
import javax.swing.event.ChangeListener;

import org.junit.jupiter.api.Test;

class RainbowButtonDiffblueTest {
    /**
     * Method under test: {@link RainbowButton#RainbowButton(String)}
     */
    @Test
    void testConstructor() throws HeadlessException {
        RainbowButton actualRainbowButton = new RainbowButton("Text");
        assertEquals("ButtonUI", actualRainbowButton.getUIClassID());
        assertEquals("Text", actualRainbowButton.getActionCommand());
        assertEquals("Text", actualRainbowButton.getLabel());
        assertEquals("Text", actualRainbowButton.getText());
        assertNull(actualRainbowButton.getSelectedObjects());
        assertNull(actualRainbowButton.getNextFocusableComponent());
        assertNull(actualRainbowButton.getFocusCycleRootAncestor());
        assertNull(actualRainbowButton.getParent());
        assertNull(actualRainbowButton.getTopLevelAncestor());
        assertNull(actualRainbowButton.getFocusTraversalPolicy());
        assertNull(actualRainbowButton.getGraphics());
        assertNull(actualRainbowButton.getGraphicsConfiguration());
        assertNull(actualRainbowButton.getLayout());
        assertNull(actualRainbowButton.getMousePosition());
        assertNull(actualRainbowButton.getDropTarget());
        assertNull(actualRainbowButton.getInputContext());
        assertNull(actualRainbowButton.getInputMethodRequests());
        assertNull(actualRainbowButton.getName());
        assertNull(actualRainbowButton.getToolTipText());
        assertNull(actualRainbowButton.getAction());
        assertNull(actualRainbowButton.getDisabledIcon());
        assertNull(actualRainbowButton.getDisabledSelectedIcon());
        assertNull(actualRainbowButton.getIcon());
        assertNull(actualRainbowButton.getPressedIcon());
        assertNull(actualRainbowButton.getRolloverIcon());
        assertNull(actualRainbowButton.getRolloverSelectedIcon());
        assertNull(actualRainbowButton.getSelectedIcon());
        assertNull(actualRainbowButton.getInputVerifier());
        assertNull(actualRainbowButton.getComponentPopupMenu());
        assertNull(actualRainbowButton.getRootPane());
        assertNull(actualRainbowButton.getTransferHandler());
        assertEquals(-1, actualRainbowButton.getDisplayedMnemonicIndex());
        assertEquals(0, actualRainbowButton.getComponentCount());
        assertEquals(0, actualRainbowButton.getHorizontalAlignment());
        assertEquals(0, actualRainbowButton.getMnemonic());
        assertEquals(0, actualRainbowButton.getVerticalAlignment());
        assertEquals(0, actualRainbowButton.getVerticalTextPosition());
        assertEquals(0, actualRainbowButton.getDebugGraphicsOptions());
        assertEquals(0, actualRainbowButton.getHeight());
        assertEquals(0, actualRainbowButton.getWidth());
        assertEquals(0, actualRainbowButton.getX());
        assertEquals(0, actualRainbowButton.getY());
        assertEquals(0, actualRainbowButton.getComponentListeners().length);
        assertEquals(0, actualRainbowButton.getHierarchyBoundsListeners().length);
        assertEquals(0, actualRainbowButton.getHierarchyListeners().length);
        assertEquals(0, actualRainbowButton.getInputMethodListeners().length);
        assertEquals(0, actualRainbowButton.getKeyListeners().length);
        assertEquals(0, actualRainbowButton.getMouseWheelListeners().length);
        assertEquals(0, actualRainbowButton.getComponents().length);
        assertEquals(0, actualRainbowButton.getContainerListeners().length);
        assertEquals(0, actualRainbowButton.getActionListeners().length);
        assertEquals(0, actualRainbowButton.getItemListeners().length);
        assertEquals(0, actualRainbowButton.getAncestorListeners().length);
        assertEquals(0, actualRainbowButton.getVetoableChangeListeners().length);
        assertEquals(0.0f, actualRainbowButton.getAlignmentX());
        assertEquals(0.5f, actualRainbowButton.getAlignmentY());
        assertEquals(0L, actualRainbowButton.getMultiClickThreshhold());
        FocusListener[] focusListeners = actualRainbowButton.getFocusListeners();
        assertEquals(1, focusListeners.length);
        MouseMotionListener[] mouseMotionListeners = actualRainbowButton.getMouseMotionListeners();
        assertEquals(1, mouseMotionListeners.length);
        PropertyChangeListener[] propertyChangeListeners = actualRainbowButton.getPropertyChangeListeners();
        assertEquals(1, propertyChangeListeners.length);
        ChangeListener[] changeListeners = actualRainbowButton.getChangeListeners();
        assertEquals(1, changeListeners.length);
        assertEquals(11, actualRainbowButton.getHorizontalTextPosition());
        MouseListener[] mouseListeners = actualRainbowButton.getMouseListeners();
        assertEquals(2, mouseListeners.length);
        assertEquals(2, actualRainbowButton.getRegisteredKeyStrokes().length);
        assertEquals(4, actualRainbowButton.getIconTextGap());
        assertEquals(Component.BaselineResizeBehavior.CENTER_OFFSET, actualRainbowButton.getBaselineResizeBehavior());
        assertFalse(actualRainbowButton.getIgnoreRepaint());
        assertFalse(actualRainbowButton.hasFocus());
        assertFalse(actualRainbowButton.isCursorSet());
        assertFalse(actualRainbowButton.isDisplayable());
        assertFalse(actualRainbowButton.isFocusOwner());
        assertFalse(actualRainbowButton.isLightweight());
        assertFalse(actualRainbowButton.isMaximumSizeSet());
        assertFalse(actualRainbowButton.isMinimumSizeSet());
        assertFalse(actualRainbowButton.isPreferredSizeSet());
        assertFalse(actualRainbowButton.isShowing());
        assertFalse(actualRainbowButton.isValid());
        assertFalse(actualRainbowButton.isFocusCycleRoot());
        assertFalse(actualRainbowButton.isFocusTraversalPolicyProvider());
        assertFalse(actualRainbowButton.isFocusTraversalPolicySet());
        assertFalse(actualRainbowButton.getHideActionText());
        assertFalse(actualRainbowButton.isContentAreaFilled());
        assertFalse(actualRainbowButton.isSelected());
        assertFalse(actualRainbowButton.isDefaultButton());
        assertFalse(actualRainbowButton.getAutoscrolls());
        assertFalse(actualRainbowButton.getInheritsPopupMenu());
        assertFalse(actualRainbowButton.isDoubleBuffered());
        assertFalse(actualRainbowButton.isManagingFocus());
        assertFalse(actualRainbowButton.isPaintingForPrint());
        assertFalse(actualRainbowButton.isPaintingTile());
        assertFalse(actualRainbowButton.isValidateRoot());
        assertTrue(actualRainbowButton.getFocusTraversalKeysEnabled());
        assertTrue(actualRainbowButton.isBackgroundSet());
        assertTrue(actualRainbowButton.isEnabled());
        assertTrue(actualRainbowButton.isFocusable());
        assertTrue(actualRainbowButton.isFontSet());
        assertTrue(actualRainbowButton.isForegroundSet());
        assertTrue(actualRainbowButton.isVisible());
        assertTrue(actualRainbowButton.isBorderPainted());
        assertTrue(actualRainbowButton.isFocusPainted());
        assertTrue(actualRainbowButton.isRolloverEnabled());
        assertTrue(actualRainbowButton.isDefaultCapable());
        assertTrue(actualRainbowButton.getVerifyInputWhenFocusTarget());
        assertTrue(actualRainbowButton.isOpaque());
        assertTrue(actualRainbowButton.isOptimizedDrawingEnabled());
        assertTrue(actualRainbowButton.isRequestFocusEnabled());
        Rectangle boundsResult = actualRainbowButton.bounds();
        assertEquals(boundsResult, actualRainbowButton.getBounds());
        assertEquals(boundsResult, actualRainbowButton.getVisibleRect());
        Dimension expectedSize = actualRainbowButton.size();
        assertEquals(expectedSize, actualRainbowButton.getSize());
        Dimension preferredSize = actualRainbowButton.getPreferredSize();
        assertEquals(preferredSize, actualRainbowButton.getMaximumSize());
        assertEquals(preferredSize, actualRainbowButton.getMinimumSize());
        MouseListener mouseListener = mouseListeners[0];
        assertSame(mouseListener, focusListeners[0]);
        assertSame(mouseListener, mouseMotionListeners[0]);
        assertSame(mouseListener, propertyChangeListeners[0]);
        assertSame(mouseListener, changeListeners[0]);
    }
}
